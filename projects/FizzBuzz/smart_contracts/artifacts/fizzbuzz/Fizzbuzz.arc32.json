{
    "hints": {
        "fizzbuzz()string[]": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuZml6emJ1enouY29udHJhY3QuRml6emJ1enouYXBwcm92YWxfcHJvZ3JhbToKICAgIGludGNibG9jayAyIDEgMCAxMAogICAgYnl0ZWNibG9jayAweDMwMzEzMjMzMzQzNTM2MzczODM5IDB4MDY4MTAxCiAgICBjYWxsc3ViIF9fcHV5YV9hcmM0X3JvdXRlcl9fCiAgICByZXR1cm4KCgovLyBzbWFydF9jb250cmFjdHMuZml6emJ1enouY29udHJhY3QuRml6emJ1enouX19wdXlhX2FyYzRfcm91dGVyX18oKSAtPiB1aW50NjQ6Cl9fcHV5YV9hcmM0X3JvdXRlcl9fOgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZpenpidXp6L2NvbnRyYWN0LnB5OjMKICAgIC8vIGNsYXNzIEZpenpidXp6KEFSQzRDb250cmFjdCk6CiAgICBwcm90byAwIDEKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBfX3B1eWFfYXJjNF9yb3V0ZXJfX19iYXJlX3JvdXRpbmdANQogICAgcHVzaGJ5dGVzIDB4ZmNlZjY2MDcgLy8gbWV0aG9kICJmaXp6YnV6eigpc3RyaW5nW10iCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBfX3B1eWFfYXJjNF9yb3V0ZXJfX19maXp6YnV6el9yb3V0ZUAyCiAgICBpbnRjXzIgLy8gMAogICAgcmV0c3ViCgpfX3B1eWFfYXJjNF9yb3V0ZXJfX19maXp6YnV6el9yb3V0ZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZpenpidXp6L2NvbnRyYWN0LnB5OjQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgZml6emJ1enoKICAgIHB1c2hieXRlcyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHN1YgoKX19wdXlhX2FyYzRfcm91dGVyX19fYmFyZV9yb3V0aW5nQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZml6emJ1enovY29udHJhY3QucHk6MwogICAgLy8gY2xhc3MgRml6emJ1enooQVJDNENvbnRyYWN0KToKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGJueiBfX3B1eWFfYXJjNF9yb3V0ZXJfX19hZnRlcl9pZl9lbHNlQDkKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0c3ViCgpfX3B1eWFfYXJjNF9yb3V0ZXJfX19hZnRlcl9pZl9lbHNlQDk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZml6emJ1enovY29udHJhY3QucHk6MwogICAgLy8gY2xhc3MgRml6emJ1enooQVJDNENvbnRyYWN0KToKICAgIGludGNfMiAvLyAwCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuZml6emJ1enouY29udHJhY3QuRml6emJ1enouZml6emJ1enooKSAtPiBieXRlczoKZml6emJ1eno6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZml6emJ1enovY29udHJhY3QucHk6NC01CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgLy8gZGVmIGZpenpidXp6KHNlbGYpIC0+IGFyYzQuRHluYW1pY0FycmF5W2FyYzQuU3RyaW5nXToKICAgIHByb3RvIDAgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2ZpenpidXp6L2NvbnRyYWN0LnB5OjYKICAgIC8vIHJlc3VsdCA9IGFyYzQuRHluYW1pY0FycmF5W2FyYzQuU3RyaW5nXSgpCiAgICBwdXNoYnl0ZXMgMHgwMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZml6emJ1enovY29udHJhY3QucHk6NwogICAgLy8gZm9yIG4gaW4gdXJhbmdlKDEwMCk6CiAgICBpbnRjXzIgLy8gMAoKZml6emJ1enpfZm9yX2hlYWRlckAxOgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZpenpidXp6L2NvbnRyYWN0LnB5OjcKICAgIC8vIGZvciBuIGluIHVyYW5nZSgxMDApOgogICAgZnJhbWVfZGlnIDEKICAgIHB1c2hpbnQgMTAwIC8vIDEwMAogICAgPAogICAgYnogZml6emJ1enpfYWZ0ZXJfZm9yQDQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9maXp6YnV6ei9jb250cmFjdC5weTo4LTkKICAgIC8vICMgTmVlZCB0byBkbyBPcFVwcyB0byBnZXQgYnVkZ2V0IGZvciB0aGUgbmV4dCBpdGVyYXRpb24gb2YgdGhlIGxvb3AKICAgIC8vIGVuc3VyZV9idWRnZXQoMjU1MCwgT3BVcEZlZVNvdXJjZS5BcHBBY2NvdW50KQogICAgcHVzaGludCAyNTUwIC8vIDI1NTAKICAgIGludGNfMSAvLyAxCiAgICBjYWxsc3ViIGVuc3VyZV9idWRnZXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9maXp6YnV6ei9jb250cmFjdC5weToxMAogICAgLy8gcmVzdWx0LmFwcGVuZChhcmM0LlN0cmluZyhzZWxmLmRpdmlkZShuICsgMSkpKSAjIFN0YXJ0IGZyb20gMSBub3QgMAogICAgZnJhbWVfZGlnIDEKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMQogICAgY2FsbHN1YiBkaXZpZGUKICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgMAogICAgc3dhcAogICAgaW50Y18xIC8vIDEKICAgIGNhbGxzdWIgZHluYW1pY19hcnJheV9jb25jYXRfYnl0ZV9sZW5ndGhfaGVhZAogICAgZnJhbWVfYnVyeSAwCiAgICBiIGZpenpidXp6X2Zvcl9oZWFkZXJAMQoKZml6emJ1enpfYWZ0ZXJfZm9yQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZml6emJ1enovY29udHJhY3QucHk6MTEKICAgIC8vIHJldHVybiByZXN1bHQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5maXp6YnV6ei5jb250cmFjdC5GaXp6YnV6ei5kaXZpZGUobnVtYmVyOiB1aW50NjQpIC0+IGJ5dGVzOgpkaXZpZGU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZml6emJ1enovY29udHJhY3QucHk6MTMtMTUKICAgIC8vICMgVGhlIGNvcmUgRml6ekJ1enogYWxnb3JpdGhtIGxvZ2ljCiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIGRpdmlkZShzZWxmLCBudW1iZXI6IFVJbnQ2NCkgLT4gU3RyaW5nOgogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvZml6emJ1enovY29udHJhY3QucHk6MTYKICAgIC8vIGlmIG51bWJlciAlIDMgPT0gMCBhbmQgbnVtYmVyICUgNSA9PSAwOgogICAgZnJhbWVfZGlnIC0xCiAgICBwdXNoaW50IDMgLy8gMwogICAgJQogICAgZHVwCiAgICBibnogZGl2aWRlX2Vsc2VfYm9keUAzCiAgICBmcmFtZV9kaWcgLTEKICAgIHB1c2hpbnQgNSAvLyA1CiAgICAlCiAgICBibnogZGl2aWRlX2Vsc2VfYm9keUAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvZml6emJ1enovY29udHJhY3QucHk6MTcKICAgIC8vIHJldHVybiBTdHJpbmcoIkZpenpCdXp6IikKICAgIHB1c2hieXRlcyAiRml6ekJ1enoiCiAgICBzd2FwCiAgICByZXRzdWIKCmRpdmlkZV9lbHNlX2JvZHlAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9maXp6YnV6ei9jb250cmFjdC5weToxOAogICAgLy8gZWxpZiBudW1iZXIgJSAzID09IDA6CiAgICBmcmFtZV9kaWcgMAogICAgYm56IGRpdmlkZV9lbHNlX2JvZHlANQogICAgLy8gc21hcnRfY29udHJhY3RzL2ZpenpidXp6L2NvbnRyYWN0LnB5OjE5CiAgICAvLyByZXR1cm4gU3RyaW5nKCJGaXp6IikKICAgIHB1c2hieXRlcyAiRml6eiIKICAgIHN3YXAKICAgIHJldHN1YgoKZGl2aWRlX2Vsc2VfYm9keUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZpenpidXp6L2NvbnRyYWN0LnB5OjIwCiAgICAvLyBlbGlmIG51bWJlciAlIDUgPT0gMDoKICAgIGZyYW1lX2RpZyAtMQogICAgcHVzaGludCA1IC8vIDUKICAgICUKICAgIGJueiBkaXZpZGVfZWxzZV9ib2R5QDcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9maXp6YnV6ei9jb250cmFjdC5weToyMQogICAgLy8gcmV0dXJuIFN0cmluZygiQnV6eiIpCiAgICBwdXNoYnl0ZXMgIkJ1enoiCiAgICBzd2FwCiAgICByZXRzdWIKCmRpdmlkZV9lbHNlX2JvZHlANzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9maXp6YnV6ei9jb250cmFjdC5weToyMwogICAgLy8gcmV0dXJuIGl0b2EobnVtYmVyKQogICAgZnJhbWVfZGlnIC0xCiAgICBjYWxsc3ViIGl0b2EKICAgIHN3YXAKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5maXp6YnV6ei5jb250cmFjdC5pdG9hKGludDogdWludDY0KSAtPiBieXRlczoKaXRvYToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9maXp6YnV6ei9jb250cmFjdC5weToyNS0yNwogICAgLy8gIyBVdGlsaXR5IHRvIGNvbnZlcnQgaW50ZWdlcnMtLT5zdHJpbmdzIHNvIHRoZXkgY2FuIGJlIGFkZGVkIHRvIHRoZSByZXN1bHQgYXJyYXkKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgaXRvYShpbnQ6IFVJbnQ2NCkgLT4gU3RyaW5nOgogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvZml6emJ1enovY29udHJhY3QucHk6MzAKICAgIC8vIGlmIGludCA8IHJhZGl4OgogICAgZnJhbWVfZGlnIC0xCiAgICAvLyBzbWFydF9jb250cmFjdHMvZml6emJ1enovY29udHJhY3QucHk6MjkKICAgIC8vIHJhZGl4ID0gZGlnaXRzLmxlbmd0aAogICAgaW50Y18zIC8vIDEwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZml6emJ1enovY29udHJhY3QucHk6MzAKICAgIC8vIGlmIGludCA8IHJhZGl4OgogICAgPAogICAgYnogaXRvYV9hZnRlcl9pZl9lbHNlQDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9maXp6YnV6ei9jb250cmFjdC5weToyOAogICAgLy8gZGlnaXRzID0gQnl0ZXMoYiIwMTIzNDU2Nzg5IikKICAgIGJ5dGVjXzAgLy8gMHgzMDMxMzIzMzM0MzUzNjM3MzgzOQogICAgLy8gc21hcnRfY29udHJhY3RzL2ZpenpidXp6L2NvbnRyYWN0LnB5OjMxCiAgICAvLyByZXR1cm4gU3RyaW5nLmZyb21fYnl0ZXMoZGlnaXRzW2ludF0pCiAgICBmcmFtZV9kaWcgLTEKICAgIGludGNfMSAvLyAxCiAgICBleHRyYWN0MwogICAgcmV0c3ViCgppdG9hX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9maXp6YnV6ei9jb250cmFjdC5weTozMgogICAgLy8gcmV0dXJuIGl0b2EoaW50IC8vIHJhZGl4KSArIFN0cmluZy5mcm9tX2J5dGVzKGRpZ2l0c1tpbnQgJSByYWRpeF0pCiAgICBmcmFtZV9kaWcgLTEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9maXp6YnV6ei9jb250cmFjdC5weToyOQogICAgLy8gcmFkaXggPSBkaWdpdHMubGVuZ3RoCiAgICBpbnRjXzMgLy8gMTAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9maXp6YnV6ei9jb250cmFjdC5weTozMgogICAgLy8gcmV0dXJuIGl0b2EoaW50IC8vIHJhZGl4KSArIFN0cmluZy5mcm9tX2J5dGVzKGRpZ2l0c1tpbnQgJSByYWRpeF0pCiAgICAvCiAgICBjYWxsc3ViIGl0b2EKICAgIGZyYW1lX2RpZyAtMQogICAgLy8gc21hcnRfY29udHJhY3RzL2ZpenpidXp6L2NvbnRyYWN0LnB5OjI5CiAgICAvLyByYWRpeCA9IGRpZ2l0cy5sZW5ndGgKICAgIGludGNfMyAvLyAxMAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZpenpidXp6L2NvbnRyYWN0LnB5OjMyCiAgICAvLyByZXR1cm4gaXRvYShpbnQgLy8gcmFkaXgpICsgU3RyaW5nLmZyb21fYnl0ZXMoZGlnaXRzW2ludCAlIHJhZGl4XSkKICAgICUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9maXp6YnV6ei9jb250cmFjdC5weToyOAogICAgLy8gZGlnaXRzID0gQnl0ZXMoYiIwMTIzNDU2Nzg5IikKICAgIGJ5dGVjXzAgLy8gMHgzMDMxMzIzMzM0MzUzNjM3MzgzOQogICAgLy8gc21hcnRfY29udHJhY3RzL2ZpenpidXp6L2NvbnRyYWN0LnB5OjMyCiAgICAvLyByZXR1cm4gaXRvYShpbnQgLy8gcmFkaXgpICsgU3RyaW5nLmZyb21fYnl0ZXMoZGlnaXRzW2ludCAlIHJhZGl4XSkKICAgIHN3YXAKICAgIGludGNfMSAvLyAxCiAgICBleHRyYWN0MwogICAgY29uY2F0CiAgICByZXRzdWIKCgovLyBfcHV5YV9saWIudXRpbC5lbnN1cmVfYnVkZ2V0KHJlcXVpcmVkX2J1ZGdldDogdWludDY0LCBmZWVfc291cmNlOiB1aW50NjQpIC0+IHZvaWQ6CmVuc3VyZV9idWRnZXQ6CiAgICBwcm90byAyIDAKICAgIGZyYW1lX2RpZyAtMgogICAgaW50Y18zIC8vIDEwCiAgICArCgplbnN1cmVfYnVkZ2V0X3doaWxlX3RvcEAxOgogICAgZnJhbWVfZGlnIDAKICAgIGdsb2JhbCBPcGNvZGVCdWRnZXQKICAgID4KICAgIGJ6IGVuc3VyZV9idWRnZXRfYWZ0ZXJfd2hpbGVANwogICAgaXR4bl9iZWdpbgogICAgcHVzaGludCA2IC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIHB1c2hpbnQgNSAvLyBEZWxldGVBcHBsaWNhdGlvbgogICAgaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KICAgIGJ5dGVjXzEgLy8gMHgwNjgxMDEKICAgIGl0eG5fZmllbGQgQXBwcm92YWxQcm9ncmFtCiAgICBieXRlY18xIC8vIDB4MDY4MTAxCiAgICBpdHhuX2ZpZWxkIENsZWFyU3RhdGVQcm9ncmFtCiAgICBmcmFtZV9kaWcgLTEKICAgIHN3aXRjaCBlbnN1cmVfYnVkZ2V0X3N3aXRjaF9jYXNlXzBAMyBlbnN1cmVfYnVkZ2V0X3N3aXRjaF9jYXNlXzFANAogICAgYiBlbnN1cmVfYnVkZ2V0X3N3aXRjaF9jYXNlX25leHRANgoKZW5zdXJlX2J1ZGdldF9zd2l0Y2hfY2FzZV8wQDM6CiAgICBpbnRjXzIgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGIgZW5zdXJlX2J1ZGdldF9zd2l0Y2hfY2FzZV9uZXh0QDYKCmVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfMUA0OgogICAgZ2xvYmFsIE1pblR4bkZlZQogICAgaXR4bl9maWVsZCBGZWUKCmVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfbmV4dEA2OgogICAgaXR4bl9zdWJtaXQKICAgIGIgZW5zdXJlX2J1ZGdldF93aGlsZV90b3BAMQoKZW5zdXJlX2J1ZGdldF9hZnRlcl93aGlsZUA3OgogICAgcmV0c3ViCgoKLy8gX3B1eWFfbGliLmFyYzQuZHluYW1pY19hcnJheV9jb25jYXRfYnl0ZV9sZW5ndGhfaGVhZChhcnJheTogYnl0ZXMsIG5ld19pdGVtc19ieXRlczogYnl0ZXMsIG5ld19pdGVtc19jb3VudDogdWludDY0KSAtPiBieXRlczoKZHluYW1pY19hcnJheV9jb25jYXRfYnl0ZV9sZW5ndGhfaGVhZDoKICAgIHByb3RvIDMgMQogICAgZnJhbWVfZGlnIC0zCiAgICBpbnRjXzIgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGR1cAogICAgZnJhbWVfZGlnIC0xCiAgICArCiAgICBzd2FwCiAgICBpbnRjXzAgLy8gMgogICAgKgogICAgaW50Y18wIC8vIDIKICAgICsKICAgIGRpZyAxCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgZnJhbWVfZGlnIC0zCiAgICBpbnRjXzAgLy8gMgogICAgZGlnIDMKICAgIHN1YnN0cmluZzMKICAgIGZyYW1lX2RpZyAtMQogICAgaW50Y18wIC8vIDIKICAgICoKICAgIGJ6ZXJvCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMwogICAgbGVuCiAgICBmcmFtZV9kaWcgLTMKICAgIHVuY292ZXIgNAogICAgdW5jb3ZlciAyCiAgICBzdWJzdHJpbmczCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICB1bmNvdmVyIDIKICAgIGludGNfMiAvLyAwCiAgICBjYWxsc3ViIHJlY2FsY3VsYXRlX2hlYWRfZm9yX2VsZW1lbnRzX3dpdGhfYnl0ZV9sZW5ndGhfaGVhZAogICAgY29uY2F0CiAgICByZXRzdWIKCgovLyBfcHV5YV9saWIuYXJjNC5yZWNhbGN1bGF0ZV9oZWFkX2Zvcl9lbGVtZW50c193aXRoX2J5dGVfbGVuZ3RoX2hlYWQoYXJyYXlfaGVhZF9hbmRfdGFpbDogYnl0ZXMsIGxlbmd0aDogdWludDY0LCBzdGFydF9hdF9pbmRleDogdWludDY0KSAtPiBieXRlczoKcmVjYWxjdWxhdGVfaGVhZF9mb3JfZWxlbWVudHNfd2l0aF9ieXRlX2xlbmd0aF9oZWFkOgogICAgcHJvdG8gMyAxCiAgICBmcmFtZV9kaWcgLTIKICAgIGludGNfMCAvLyAyCiAgICAqCiAgICBkdXAKICAgIGZyYW1lX2RpZyAtMQogICAgaW50Y18wIC8vIDIKICAgICoKICAgIGR1cAogICAgY292ZXIgMgogICAgZnJhbWVfZGlnIC0zCiAgICBzd2FwCiAgICBleHRyYWN0X3VpbnQxNgogICAgZnJhbWVfZGlnIC0xCiAgICBzZWxlY3QKCnJlY2FsY3VsYXRlX2hlYWRfZm9yX2VsZW1lbnRzX3dpdGhfYnl0ZV9sZW5ndGhfaGVhZF9mb3JfaGVhZGVyQDE6CiAgICBmcmFtZV9kaWcgMQogICAgZnJhbWVfZGlnIDAKICAgIDwKICAgIGJ6IHJlY2FsY3VsYXRlX2hlYWRfZm9yX2VsZW1lbnRzX3dpdGhfYnl0ZV9sZW5ndGhfaGVhZF9hZnRlcl9mb3JANAogICAgZnJhbWVfZGlnIDIKICAgIGR1cAogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIGZyYW1lX2RpZyAtMwogICAgZnJhbWVfZGlnIDEKICAgIGR1cAogICAgY292ZXIgNAogICAgdW5jb3ZlciAyCiAgICByZXBsYWNlMwogICAgZHVwCiAgICBmcmFtZV9idXJ5IC0zCiAgICBkaWcgMQogICAgZXh0cmFjdF91aW50MTYKICAgIGludGNfMCAvLyAyCiAgICArCiAgICArCiAgICBmcmFtZV9idXJ5IDIKICAgIGludGNfMCAvLyAyCiAgICArCiAgICBmcmFtZV9idXJ5IDEKICAgIGIgcmVjYWxjdWxhdGVfaGVhZF9mb3JfZWxlbWVudHNfd2l0aF9ieXRlX2xlbmd0aF9oZWFkX2Zvcl9oZWFkZXJAMQoKcmVjYWxjdWxhdGVfaGVhZF9mb3JfZWxlbWVudHNfd2l0aF9ieXRlX2xlbmd0aF9oZWFkX2FmdGVyX2ZvckA0OgogICAgZnJhbWVfZGlnIC0zCiAgICBmcmFtZV9idXJ5IDAKICAgIHJldHN1Ygo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuZml6emJ1enouY29udHJhY3QuRml6emJ1enouY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Fizzbuzz",
        "methods": [
            {
                "name": "fizzbuzz",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "string[]"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}